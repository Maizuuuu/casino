import logging
import random
import math
import time
from datetime import datetime, timedelta
import sqlite3
from typing import Dict, Tuple, List
import time

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackContext
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "7334381322:AAFnQuyzmVEyxhWMt8CMz1Y8wh4dxDVkibs"
ADMIN_IDS = [123456789]  # –í–∞—à Telegram ID
DATABASE_NAME = "casino_bot.db"
INITIAL_BALANCE = 1000

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = None
    try:
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        
        # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        cursor.execute("PRAGMA foreign_keys = ON")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables = [
            '''CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                balance INTEGER DEFAULT 1000,
                registration_date TEXT,
                is_admin INTEGER DEFAULT 0)''',
                
            '''CREATE TABLE IF NOT EXISTS transactions (
                transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount INTEGER,
                transaction_type TEXT,
                game_type TEXT,
                result TEXT,
                timestamp TEXT,
                FOREIGN KEY (user_id) REFERENCES users(user_id))''',
                
            '''CREATE TABLE IF NOT EXISTS events (
                event_id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT NOT NULL,
                multiplier REAL,
                fixed_win INTEGER,
                discount INTEGER,
                attempts INTEGER,
                expires_at TEXT,
                created_by INTEGER,
                FOREIGN KEY (created_by) REFERENCES users(user_id))''',
                
            '''CREATE TABLE IF NOT EXISTS promocodes (
                code TEXT PRIMARY KEY,
                bonus_amount INTEGER NOT NULL,
                expires_at TEXT,
                created_by INTEGER,
                FOREIGN KEY (created_by) REFERENCES users(user_id))''',
                
            '''CREATE TABLE IF NOT EXISTS used_promocodes (
                user_id INTEGER,
                code TEXT,
                PRIMARY KEY (user_id, code),
                FOREIGN KEY (user_id) REFERENCES users(user_id),
                FOREIGN KEY (code) REFERENCES promocodes(code))'''
        ]
        
        for table in tables:
            cursor.execute(table)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in ADMIN_IDS:
            cursor.execute('INSERT OR IGNORE INTO users (user_id, is_admin, registration_date) VALUES (?, ?, ?)',
                          (admin_id, 1, datetime.now().isoformat()))
        
        conn.commit()
    except sqlite3.Error as e:
        print(f"Database error: {e}")
    finally:
        if conn:
            conn.close()    

init_db()

def add_event(name: str, description: str, event_type: str, value: float, 
             attempts: int, days_active: int, admin_id: int) -> tuple:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (success, message)"""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if not name or not description:
        return False, "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
    
    if event_type == "multiplier" and value <= 0:
        return False, "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
    elif event_type == "fixed_win" and value <= 0:
        return False, "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
    elif event_type == "discount" and (value <= 0 or value > 100):
        return False, "–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1% –¥–æ 100%"
    
    if attempts < -1 or attempts == 0:
        return False, "–ü–æ–ø—ã—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å -1 (–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ) –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
    
    if days_active <= 0:
        return False, "–î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
    
    expires_at = (datetime.now() + timedelta(days=days_active)).isoformat()
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    try:
        if event_type == "multiplier":
            cursor.execute('''
                INSERT INTO events (name, description, multiplier, attempts, expires_at, created_by)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (name, description, value, attempts, expires_at, admin_id))
        elif event_type == "fixed_win":
            cursor.execute('''
                INSERT INTO events (name, description, fixed_win, attempts, expires_at, created_by)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (name, description, int(value), attempts, expires_at, admin_id))
        elif event_type == "discount":
            cursor.execute('''
                INSERT INTO events (name, description, discount, attempts, expires_at, created_by)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (name, description, int(value), attempts, expires_at, admin_id))
        
        conn.commit()
        return True, "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!"
    except sqlite3.IntegrityError:
        return False, "–°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    except Exception as e:
        logger.error(f"Error adding event: {e}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}"
    finally:
        conn.close()

async def admin_add_event_multiplier(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è-–º–Ω–æ–∂–∏—Ç–µ–ª—è"""
    context.user_data['event_creation'] = {
        'type': 'multiplier',
        'step': 'name'
    }
    
    await send_or_edit(update,
                      "üìà –°–û–ó–î–ê–ù–ò–ï –ú–ù–û–ñ–ò–¢–ï–õ–Ø\n\n"
                      "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
                      [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_cancel_event')]])  # –ò–ó–ú–ï–ù–ï–ù–û

async def admin_add_event_fixed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—ã–∏–≥—Ä—ã—à–µ–º"""
    context.user_data['event_creation'] = {
        'type': 'fixed_win',
        'step': 'name'
    }
    
    await send_or_edit(update,
                      "üí∞ –°–û–ó–î–ê–ù–ò–ï –§–ò–ö–°–ò–†–û–í–ê–ù–ù–û–ì–û –í–´–ò–ì–†–´–®–ê\n\n"
                      "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
                      [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_cancel_event')]])  # –ò–ó–ú–ï–ù–ï–ù–û

async def admin_add_event_discount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Å–æ —Å–∫–∏–¥–∫–æ–π"""
    context.user_data['event_creation'] = {
        'type': 'discount', 
        'step': 'name'
    }
    
    await send_or_edit(update,
                      "üé´ –°–û–ó–î–ê–ù–ò–ï –°–ö–ò–î–ö–ò\n\n"
                      "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
                      [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_cancel_event')]])  # –ò–ó–ú–ï–ù–ï–ù–û
    
def get_active_events_count() -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM events WHERE expires_at > datetime("now")')
    count = cursor.fetchone()[0]
    conn.close()
    return count

async def handle_event_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ step-by-step —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ callback'–∞–º–∏"""
    if 'event_creation' not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é")
        return
        
    creation_data = context.user_data['event_creation']
    text = update.message.text.strip()
    user_id = update.effective_user.id
    
    try:
        if creation_data['step'] == 'name':
            if len(text) < 3:
                await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤")
                return
                
            creation_data['name'] = text
            creation_data['step'] = 'description'
            
            await update.message.reply_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_cancel_event')]])  # –ò–ó–ú–ï–ù–ï–ù–û
            )
            
        elif creation_data['step'] == 'description':
            if len(text) < 10:
                await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤")
                return
                
            creation_data['description'] = text
            creation_data['step'] = 'value'
            
            if creation_data['type'] == 'multiplier':
                await update.message.reply_text(
                    "üî¢ –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_cancel_event')]])  # –ò–ó–ú–ï–ù–ï–ù–û
                )
            elif creation_data['type'] == 'fixed_win':
                await update.message.reply_text(
                    "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞:",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_cancel_event')]])  # –ò–ó–ú–ï–ù–ï–ù–û
                )
            elif creation_data['type'] == 'discount':
                await update.message.reply_text(
                    "üé´ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (1-100):",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_cancel_event')]])  # –ò–ó–ú–ï–ù–ï–ù–û
                )
                
        elif creation_data['step'] == 'value':
            value = float(text)
            
            if creation_data['type'] == 'multiplier' and value <= 0:
                await update.message.reply_text("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                return
            elif creation_data['type'] == 'fixed_win' and value <= 0:
                await update.message.reply_text("‚ùå –í—ã–∏–≥—Ä—ã—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                return
            elif creation_data['type'] == 'discount' and (value <= 0 or value > 100):
                await update.message.reply_text("‚ùå –°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1% –¥–æ 100%")
                return
                
            creation_data['value'] = value
            creation_data['step'] = 'attempts'
            
            await update.message.reply_text(
                "üîÑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (-1 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö):",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_cancel_event')]])  # –ò–ó–ú–ï–ù–ï–ù–û
            )
            
        elif creation_data['step'] == 'attempts':
            attempts = int(text)
            if attempts < -1 or attempts == 0:
                await update.message.reply_text("‚ùå –ü–æ–ø—ã—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å -1 (–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ) –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return
                
            creation_data['attempts'] = attempts
            creation_data['step'] = 'days'
            
            await update.message.reply_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_cancel_event')]])  # –ò–ó–ú–ï–ù–ï–ù–û
            )
            
        elif creation_data['step'] == 'days':
            days = int(text)
            if days <= 0:
                await update.message.reply_text("‚ùå –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return
                
            creation_data['days'] = days
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ - —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            success, message = add_event(
                name=creation_data['name'],
                description=creation_data['description'],
                event_type=creation_data['type'],
                value=creation_data['value'],
                attempts=creation_data['attempts'],
                days_active=creation_data['days'],
                admin_id=user_id
            )
            
            if success:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π summary
                event_type_name = {
                    'multiplier': '–ú–Ω–æ–∂–∏—Ç–µ–ª—å',
                    'fixed_win': '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à', 
                    'discount': '–°–∫–∏–¥–∫–∞'
                }[creation_data['type']]
                
                summary = (
                    f"‚úÖ {message}\n\n"
                    f"üìã –°–≤–æ–¥–∫–∞ —Å–æ–±—ã—Ç–∏—è:\n"
                    f"üè∑ –¢–∏–ø: {event_type_name}\n"
                    f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {creation_data['name']}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {creation_data['description']}\n"
                )
                
                if creation_data['type'] == 'multiplier':
                    summary += f"üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{creation_data['value']}\n"
                elif creation_data['type'] == 'fixed_win':
                    summary += f"üí∞ –í—ã–∏–≥—Ä—ã—à: {int(creation_data['value'])} –º–æ–Ω–µ—Ç\n"
                elif creation_data['type'] == 'discount':
                    summary += f"üé´ –°–∫–∏–¥–∫–∞: {int(creation_data['value'])}%\n"
                    
                summary += (
                    f"üîÑ –ü–æ–ø—ã—Ç–æ–∫: {'‚àû' if creation_data['attempts'] == -1 else creation_data['attempts']}\n"
                    f"üìÖ –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {creation_data['days']}\n"
                    f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {(datetime.now() + timedelta(days=creation_data['days'])).strftime('%d.%m.%Y')}"
                )
                
                await update.message.reply_text(
                    summary,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data='admin_add_event')],
                        [InlineKeyboardButton("üìã –ö —Å–æ–±—ã—Ç–∏—è–º", callback_data='admin_view_events')],
                        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data='admin_panel')]
                    ])
                )
            else:
                await update.message.reply_text(
                    f"‚ùå {message}",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='admin_add_event')]])
                )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
            context.user_data.pop('event_creation', None)
            
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")



def delete_event(event_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ ID"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    try:
        cursor.execute('DELETE FROM events WHERE event_id = ?', (event_id,))
        conn.commit()
        return cursor.rowcount > 0
    except Exception as e:
        logger.error(f"Error deleting event: {e}")
        return False
    finally:
        conn.close()

async def cancel_event_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    if 'event_creation' in context.user_data:
        context.user_data.pop('event_creation', None)
        await update.callback_query.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    keyboard = [
        [InlineKeyboardButton("üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞", callback_data='admin_add_event_multiplier')],
        [InlineKeyboardButton("üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å", callback_data='admin_add_event_fixed')],
        [InlineKeyboardButton("üé´ –°–∫–∏–¥–∫–∞ –Ω–∞ —Å—Ç–∞–≤–∫–∏", callback_data='admin_add_event_discount')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_events')]
    ]
    
    text = (
        "üéÅ –í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –°–û–ë–´–¢–ò–Ø\n\n"
        "üìà <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞</b> - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à –≤ X —Ä–∞–∑\n"
        "üí∞ <b>–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å</b> - –¥–æ–±–∞–≤–ª—è–µ—Ç N –º–æ–Ω–µ—Ç –∫ –≤—ã–∏–≥—Ä—ã—à—É\n"  
        "üé´ <b>–°–∫–∏–¥–∫–∞ –Ω–∞ —Å—Ç–∞–≤–∫–∏</b> - —É–º–µ–Ω—å—à–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∞–≤–æ–∫ –Ω–∞ N%\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:"
    )
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
def get_event_by_id(event_id: int) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –ø–æ ID"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT event_id, name, description, multiplier, fixed_win, discount, 
               attempts, expires_at, created_by 
        FROM events WHERE event_id = ?
    ''', (event_id,))
    
    row = cursor.fetchone()
    conn.close()
    
    if row:
        return {
            'id': row[0],
            'name': row[1],
            'description': row[2],
            'multiplier': row[3],
            'fixed_win': row[4],
            'discount': row[5],
            'attempts': row[6],
            'expires_at': row[7],
            'created_by': row[8]
        }
    return None

def apply_event_bonuses(user_id: int, game_type: str, bet_amount: int) -> tuple:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã —Å–æ–±—ã—Ç–∏–π –∫ –∏–≥—Ä–µ"""
    events = get_active_events_for_game(game_type)
    bonuses = {
        'multiplier': 1.0,
        'fixed_bonus': 0,
        'discount': 0
    }
    
    applied_events = []
    
    for event in events:
        event_id = event[0]
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if event[6] > 0:  # –ï—Å–ª–∏ –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
            decrease_event_attempts(event_id)
        
        if event[3]:  # Multiplier
            bonuses['multiplier'] *= event[3]
            applied_events.append(f"x{event[3]}")
        elif event[4]:  # Fixed win
            bonuses['fixed_bonus'] += event[4]
            applied_events.append(f"+{event[4]} –º–æ–Ω–µ—Ç")
        elif event[5]:  # Discount
            discount_percent = event[5]
            actual_discount = bet_amount * discount_percent / 100
            bonuses['discount'] += actual_discount
            applied_events.append(f"-{discount_percent}%")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –∫ —Å—Ç–∞–≤–∫–µ
    final_bet = max(0, bet_amount - bonuses['discount'])
    
    return final_bet, bonuses, applied_events

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user(user_id: int) -> Dict:
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    if user:
        return {
            'user_id': user[0],
            'username': user[1],
            'first_name': user[2],
            'last_name': user[3],
            'balance': user[4],
            'registration_date': user[5],
            'is_admin': bool(user[6])
        }
    return None

def get_admin_name(admin_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ ID"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT first_name, last_name FROM users WHERE user_id = ?', (admin_id,))
    admin = cursor.fetchone()
    conn.close()
    
    if admin:
        return f"{admin[0]} {admin[1] or ''}".strip()
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

def get_active_events_for_game(game_type: str) -> list:
    """–ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–≥—Ä—ã"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    # –î–ª—è —Å–ª–æ—Ç–æ–≤ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫–∏, –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä - –º–Ω–æ–∂–∏—Ç–µ–ª–∏/—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
    if game_type == "slots":
        cursor.execute('''
            SELECT * FROM events 
            WHERE expires_at > datetime('now') 
            AND (discount > 0 OR multiplier > 1)
            ORDER BY expires_at ASC
        ''')
    else:
        cursor.execute('''
            SELECT * FROM events 
            WHERE expires_at > datetime('now') 
            AND (multiplier > 1 OR fixed_win > 0)
            ORDER BY expires_at ASC
        ''')
    
    events = cursor.fetchall()
    conn.close()
    return events

def create_user(user_id: int, username: str, first_name: str, last_name: str) -> None:
    is_admin = 1 if user_id in ADMIN_IDS else 0
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO users (user_id, username, first_name, last_name, registration_date, is_admin) VALUES (?, ?, ?, ?, ?, ?)',
        (user_id, username, first_name, last_name, datetime.now().isoformat(), is_admin)
    )
    conn.commit()
    conn.close()

async def check_balance(update: Update, context: ContextTypes.DEFAULT_TYPE, username: str = None) -> None:
    if username:
        # –ü–æ–∏—Å–∫ –ø–æ username
        if username.startswith('@'):
            username = username[1:]
        
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute('SELECT balance FROM users WHERE username = ?', (username,))
        result = cursor.fetchone()
        conn.close()
        
        if not result:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        balance = result[0]
        await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å @{username}: {balance} –º–æ–Ω–µ—Ç")
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        user_data = get_user(update.effective_user.id)
        await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç")

def update_balance(user_id: int, amount: int) -> None:
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    conn.commit()
    conn.close()

def add_transaction(user_id: int, amount: int, transaction_type: str, game_type: str = None, result: str = None) -> None:
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO transactions (user_id, amount, transaction_type, game_type, result, timestamp) VALUES (?, ?, ?, ?, ?, ?)',
        (user_id, abs(amount), transaction_type, game_type, result, datetime.now().isoformat())
    )
    conn.commit()
    conn.close()

def get_all_users() -> List[Dict]:
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, username, first_name, last_name, balance FROM users')
    users = cursor.fetchall()
    conn.close()
    
    return [{
        'user_id': user[0],
        'username': user[1],
        'first_name': user[2],
        'last_name': user[3],
        'balance': user[4]
    } for user in users]

def reset_statistics() -> None:
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM transactions')
    cursor.execute('UPDATE users SET balance = ?', (INITIAL_BALANCE,))
    conn.commit()
    conn.close()

def modify_user_balance(user_id: int, amount: int) -> Dict:
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    if not user:
        conn.close()
        return None
    
    current_balance = user[4]
    new_balance = max(0, current_balance + amount)
    
    cursor.execute('UPDATE users SET balance = ? WHERE user_id = ?', (new_balance, user_id))
    
    transaction_type = "admin_add" if amount > 0 else "admin_remove"
    cursor.execute(
        'INSERT INTO transactions (user_id, amount, transaction_type, timestamp) VALUES (?, ?, ?, ?)',
        (user_id, abs(amount), transaction_type, datetime.now().isoformat())
    )
    
    conn.commit()
    conn.close()
    
    return {
        'username': user[1],
        'first_name': user[2],
        'last_name': user[3],
        'old_balance': current_balance,
        'new_balance': new_balance
    }

# –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
def calculate_complex_coefficient(user_id: int, bet_amount: int, game_type: str) -> float:
    timestamp = int(time.time())
    user_data = get_user(user_id)
    balance = user_data['balance'] if user_data else INITIAL_BALANCE
    
    seed = (
        (user_id % 1000) + 
        (timestamp % 100000) + 
        (bet_amount % 50) + 
        (balance % 200) +
        random.randint(1, 1000)
    )
    random.seed(seed)
    
    if game_type == "dice":
        base = random.uniform(0.8, 1.2)
        mod1 = math.sin(timestamp / 1000) * 0.3
        mod2 = (bet_amount / (balance + 1)) * 0.5
        mod3 = (user_id % 10) * 0.05
        coefficient = base + mod1 - mod2 + mod3
        return max(1.0, min(6.0, coefficient * 3.5))
    
    elif game_type == "slots":
        base = random.uniform(0.5, 1.5)
        mod1 = math.cos(timestamp / 500) * 0.4
        mod2 = (bet_amount / (balance + 1)) * 0.8
        mod3 = ((user_id + timestamp) % 20) * 0.1
        coefficient = base + mod1 - mod2 + mod3
        return max(1.0, min(100.0, coefficient * 50))
    
    return 1.0

async def play_dice(user_id: int, bet_amount: int, guess: int) -> Tuple[bool, float, int, list, int]:
    user = get_user(user_id)
    if not user or user['balance'] < bet_amount:
        return False, 0.0, 0, [], 0
    
    # ‚úÖ –í–´–ó–´–í–ê–ï–ú –§–£–ù–ö–¶–ò–Æ –ë–û–ù–£–°–û–í (–†–ê–ù–¨–®–ï –≠–¢–û–ì–û –ù–ï –ë–´–õ–û!)
    final_bet, bonuses, applied_events = apply_event_bonuses(user_id, "dice", bet_amount)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫
    if user['balance'] < final_bet:
        return False, 0.0, 0, [], 0
    
    coefficient = calculate_complex_coefficient(user_id, final_bet, "dice")
    roll = random.randint(1, 6)
    total_win_amount = 0
    
    if guess == roll:
        # ‚úÖ –ü–†–ò–ú–ï–ù–Ø–ï–ú –ë–û–ù–£–°–´ –ü–†–ê–í–ò–õ–¨–ù–û
        base_win = int(final_bet * coefficient)          # –ë–∞–∑–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à
        total_win = base_win + bonuses['fixed_bonus']    # + —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å
        total_win_amount = int(total_win * bonuses['multiplier'])  # √ó –º–Ω–æ–∂–∏—Ç–µ–ª—å
        
        update_balance(user_id, total_win_amount)
        add_transaction(user_id, total_win_amount, "win", "dice", 
                       f"guess:{guess},roll:{roll},coef:{coefficient:.2f},events:{applied_events},final_bet:{final_bet}")
        return True, coefficient, roll, applied_events, total_win_amount
    
    # ‚úÖ –ü–†–ò –ü–†–û–ò–ì–†–´–®–ï: —Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ final_bet (—É–∂–µ —Å–æ —Å–∫–∏–¥–∫–æ–π)
    update_balance(user_id, -final_bet)
    add_transaction(user_id, -final_bet, "loss", "dice", 
                   f"guess:{guess},roll:{roll},coef:{coefficient:.2f},events:{applied_events},final_bet:{final_bet}")
    return False, coefficient, roll, applied_events, 0

async def play_slots(user_id: int, bet_amount: int) -> Tuple[bool, float, list, list, int]:
    user = get_user(user_id)
    if not user or user['balance'] < bet_amount:
        return False, 0.0, [], [], 0
    
    # ‚úÖ –í–´–ó–´–í–ê–ï–ú –§–£–ù–ö–¶–ò–Æ –ë–û–ù–£–°–û–í
    final_bet, bonuses, applied_events = apply_event_bonuses(user_id, "slots", bet_amount)
    
    if user['balance'] < final_bet:
        return False, 0.0, [], [], 0
    
    coefficient = calculate_complex_coefficient(user_id, final_bet, "slots")
    symbols = ['üçí', 'üçã', 'üçä', 'üçá', 'üçâ', '7']
    reels = [random.choice(symbols) for _ in range(3)]
    
    total_win_amount = 0
    win_coefficient = 0
    
    if reels[0] == reels[1] == reels[2]:
        win_coefficient = 10 if reels[0] == '7' else 3
        # ‚úÖ –ü–†–ò–ú–ï–ù–Ø–ï–ú –ë–û–ù–£–°–´ –ü–†–ê–í–ò–õ–¨–ù–û
        base_win = int(final_bet * win_coefficient)       # –ë–∞–∑–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à
        total_win = base_win + bonuses['fixed_bonus']     # + —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å
        total_win_amount = int(total_win * bonuses['multiplier'])  # √ó –º–Ω–æ–∂–∏—Ç–µ–ª—å
        
        update_balance(user_id, total_win_amount)
        add_transaction(user_id, total_win_amount, "win", "slots", 
                       f"reels:{''.join(reels)},coef:{coefficient:.2f}x{win_coefficient},events:{applied_events},final_bet:{final_bet}")
        return True, coefficient * win_coefficient, reels, applied_events, total_win_amount
    elif reels[0] == reels[1] or reels[1] == reels[2]:
        win_coefficient = 0.5
        # ‚úÖ –ü–†–ò–ú–ï–ù–Ø–ï–ú –ë–û–ù–£–°–´ –ü–†–ê–í–ò–õ–¨–ù–û
        base_win = int(final_bet * win_coefficient)       # –ë–∞–∑–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à
        total_win = base_win + bonuses['fixed_bonus']     # + —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å
        total_win_amount = int(total_win * bonuses['multiplier'])  # √ó –º–Ω–æ–∂–∏—Ç–µ–ª—å
        
        update_balance(user_id, total_win_amount)
        add_transaction(user_id, total_win_amount, "win", "slots", 
                       f"reels:{''.join(reels)},coef:0.5,events:{applied_events},final_bet:{final_bet}")
        return True, 0.5, reels, applied_events, total_win_amount
    
    # ‚úÖ –ü–†–ò –ü–†–û–ò–ì–†–´–®–ï: —Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ final_bet
    update_balance(user_id, -final_bet)
    add_transaction(user_id, -final_bet, "loss", "slots", 
                   f"reels:{''.join(reels)},coef:{coefficient:.2f},events:{applied_events},final_bet:{final_bet}")
    return False, coefficient, reels, applied_events, 0


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not get_user(user.id):
        create_user(user.id, user.username, user.first_name, user.last_name)
        await update.message.reply_text(
            f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Lucky Azart, {user.first_name}!\n"
            f"üí∞ –í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {INITIAL_BALANCE} –º–æ–Ω–µ—Ç."
        )
    else:
        user_data = get_user(user.id)
        await update.message.reply_text(
            f"üé∞ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç."
        )
    await show_disclaimer(update, context, "start")
    await menu(update, context)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['chat_id'] = update.effective_chat.id
    context.user_data['user_id'] = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    events_count = get_active_events_count()
    events_text = "üéâ –°–æ–±—ã—Ç–∏—è" + (f" ({events_count})" if events_count > 0 else "")
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data='games_menu')],
        [InlineKeyboardButton(events_text, callback_data='events_menu')],  # –° –ø–æ–¥—Å—á–µ—Ç–æ–º
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance')],
        [InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data='users_menu')],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∫–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    user_data = get_user(update.effective_user.id)

    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
    menu_text = 'üé∞ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>'
    if events_count > 0:
        menu_text += f'\n\nüéÅ <b>–î–æ—Å—Ç—É–ø–Ω–æ {events_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π!</b>'
    
    # –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if 'job' in context.user_data:
        context.user_data['job'].schedule_removal()
        del context.user_data['job']
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            menu_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            menu_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

# –í menu.py
async def events_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    events = get_active_events()
    
    if not events:
        await send_or_edit(update, 
                         "üéâ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n\n"
                         "–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ –±–æ–Ω—É—Å—ã!",
                         [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]])
        return
    
    text = "üéÅ <b>–ê–ö–¢–ò–í–ù–´–ï –°–û–ë–´–¢–ò–Ø</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:\n\n"
    
    keyboard = []
    for event in events:
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        event_icon = "üìà" if event['multiplier'] else "üí∞" if event['fixed_win'] else "üé´"
        event_value = f"x{event['multiplier']}" if event['multiplier'] else f"+{event['fixed_win']}" if event['fixed_win'] else f"-{event['discount']}%"
        
        days_left = (datetime.fromisoformat(event['expires_at']) - datetime.now()).days
        days_text = f" ({days_left}–¥.)" if days_left > 0 else " (—Å–µ–≥–æ–¥–Ω—è!)"
        
        button_text = f"{event_icon} {event['name']} {event_value}{days_text}"
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(button_text) > 35:
            button_text = button_text[:32] + "..."
            
        keyboard.append([InlineKeyboardButton(
            button_text, 
            callback_data=f"view_event_{event['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')])
    
    await send_or_edit(update, text, keyboard)

def get_event_by_id(event_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM events WHERE event_id = ?', (event_id,))
    row = cursor.fetchone()
    conn.close()
    
    if row:
        return {
            'id': row[0],
            'name': row[1],
            'description': row[2],
            'multiplier': row[3],
            'fixed_win': row[4],
            'discount': row[5],
            'attempts': row[6],
            'expires_at': row[7],
            'created_by': row[8]
        }
    return None

async def send_or_edit(update, text, keyboard):
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

def setup_handlers(application):
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é
    application.add_handler(CallbackQueryHandler(events_menu, pattern='^events_menu$'))
    application.add_handler(CallbackQueryHandler(view_event, pattern='^view_event_'))
    
    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    application.add_handler(CallbackQueryHandler(admin_events_menu, pattern='^admin_events$'))
    application.add_handler(CallbackQueryHandler(admin_add_event, pattern='^admin_add_event$'))
    application.add_handler(CallbackQueryHandler(admin_promocodes_menu, pattern='^admin_promocodes$'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    application.add_handler(CallbackQueryHandler(add_event_multiplier_handler, pattern='^add_event_multiplier$'))
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.Regex(r'.+\|.+\|.+\|.+\|.+'),
        process_event_creation
    ))

async def view_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    event_id = int(update.callback_query.data.split('_')[-1])
    event = get_event_by_id(event_id)
    
    if not event or datetime.fromisoformat(event['expires_at']) < datetime.now():
        await update.callback_query.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ")
        await events_menu(update, context)
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
    event_type = ""
    event_value = ""
    
    if event['multiplier']:
        event_type = "üìà –ú–ù–û–ñ–ò–¢–ï–õ–¨ –í–´–ò–ì–†–´–®–ê"
        event_value = f"–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–∞—à –≤—ã–∏–≥—Ä—ã—à –≤ <b>x{event['multiplier']}</b> —Ä–∞–∑!"
    elif event['fixed_win']:
        event_type = "üí∞ –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –ë–û–ù–£–°"
        event_value = f"–î–æ–±–∞–≤–ª—è–µ—Ç <b>{event['fixed_win']} –º–æ–Ω–µ—Ç</b> –∫ –∫–∞–∂–¥–æ–º—É –≤—ã–∏–≥—Ä—ã—à—É!"
    elif event['discount']:
        event_type = "üé´ –°–ö–ò–î–ö–ê –ù–ê –°–¢–ê–í–ö–ò"
        event_value = f"–£–º–µ–Ω—å—à–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∞–≤–æ–∫ –Ω–∞ <b>{event['discount']}%</b>!"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    expires_at = datetime.fromisoformat(event['expires_at'])
    time_left = expires_at - datetime.now()
    days_left = time_left.days
    hours_left = time_left.seconds // 3600
    
    time_left_text = ""
    if days_left > 0:
        time_left_text = f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: <b>{days_left} –¥–Ω–µ–π</b>"
    elif hours_left > 0:
        time_left_text = f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: <b>{hours_left} —á–∞—Å–æ–≤</b>"
    else:
        time_left_text = "‚è∞ –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è <b>—Å–µ–≥–æ–¥–Ω—è</b>!"
    
    attempts_text = "üîÑ –ü–æ–ø—ã—Ç–æ–∫: <b>‚àû</b>" if event['attempts'] == -1 else f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{event['attempts']}</b>"
    
    text = (
        f"{event_type}\n\n"
        f"üéØ <b>{event['name']}</b>\n\n"
        f"{event['description']}\n\n"
        f"{event_value}\n\n"
        f"{time_left_text}\n"
        f"{attempts_text}\n\n"
        f"üë§ –°–æ–∑–¥–∞–Ω–æ: {get_admin_name(event['created_by'])}"
    )
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å" –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏
    if event['attempts'] != 0:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –∫–∞–∫–∏—Ö –∏–≥—Ä –ø—Ä–∏–º–µ–Ω–∏–º–æ —Å–æ–±—ã—Ç–∏–µ
        applicable_games = []
        if event['multiplier'] or event['fixed_win']:
            applicable_games.extend(['dice', 'slots', 'roulette'])
        if event['discount']:
            applicable_games.extend(['slots'])  # –°–∫–∏–¥–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ª–æ—Ç–æ–≤ –ø–æ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ
        
        if applicable_games:
            keyboard.append([InlineKeyboardButton("üéÆ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–∞—Ö", callback_data='games_menu')])
    
    keyboard.append([InlineKeyboardButton("üìã –í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data='events_menu')])
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    user_data = get_user(update.effective_user.id)
    if user_data and user_data['is_admin']:
        keyboard.append([
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"admin_edit_event_{event_id}"),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_delete_{event_id}")
        ])
    
    await send_or_edit(update, text, keyboard)

async def admin_promocodes_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    promocodes = get_all_promocodes()
    
    keyboard = []
    for promo in promocodes:
        keyboard.append([InlineKeyboardButton(
            f"{promo['code']} (+{promo['amount']})", 
            callback_data=f"view_promo_{promo['code']}"
        )])
    
    keyboard.extend([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data='add_promocode')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]
    ])
    
    await send_or_edit(update, "üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:", keyboard)

def get_active_events():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT event_id, name, description, multiplier, fixed_win, discount, 
               attempts, expires_at, created_by 
        FROM events 
        WHERE expires_at > datetime('now')
        ORDER BY expires_at ASC
    ''')
    
    events = []
    for row in cursor.fetchall():
        events.append({
            'id': row[0],
            'name': row[1],
            'description': row[2],
            'multiplier': row[3],
            'fixed_win': row[4],
            'discount': row[5],
            'attempts': row[6],
            'expires_at': row[7],
            'created_by': row[8]
        })
    conn.close()
    return events

def format_event_info(event: tuple) -> str:
    info = f"<b>{event[1]}</b>\n{event[2]}\n\n"
    if event[3]:
        info += f"üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{event[3]}\n"
    elif event[4]:
        info += f"üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: +{event[4]} –º–æ–Ω–µ—Ç\n"
    elif event[5]:
        info += f"üé´ –°–∫–∏–¥–∫–∞: {event[5]}% –Ω–∞ –∫—Ä—É—Ç–∫–∏\n"
    
    info += f"üîÑ –ü–æ–ø—ã—Ç–æ–∫: {'‚àû' if event[6] == -1 else event[6]}\n"
    info += f"‚è≥ –î–æ: {event[7][:10]}\n"
    info += f"üë§ –°–æ–∑–¥–∞–ª: {get_admin_name(event[8])}"
    return info

# –í admin.py
async def admin_events_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data='admin_add_event')],
        [InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è", callback_data='admin_view_events')],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data='admin_delete_event')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]
    ]
    
    await send_or_edit(update, "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏:", keyboard)

async def admin_view_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    events = get_active_events()
    
    if not events:
        await send_or_edit(update, 
                         "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
                         [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_events')]])
        return
    
    keyboard = []
    for event in events:
        event_info = f"{event['name']} (ID: {event['id']})"
        keyboard.append([InlineKeyboardButton(event_info, callback_data=f"admin_event_info_{event['id']}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_events')])
    
    await send_or_edit(update, "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:", keyboard)

async def admin_event_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏"""
    event_id = int(update.callback_query.data.split('_')[-1])
    event = get_event_by_id(event_id)
    
    if not event:
        await update.callback_query.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    text = (
        f"üéÅ <b>{event['name']}</b>\n\n"
        f"{event['description']}\n\n"
        f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {event['expires_at'][:10]}\n"
        f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {'‚àû' if event['attempts'] == -1 else event['attempts']}\n"
    )
    
    if event['multiplier']:
        text += f"üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{event['multiplier']}\n"
    elif event['fixed_win']:
        text += f"üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {event['fixed_win']} –º–æ–Ω–µ—Ç\n"
    elif event['discount']:
        text += f"üé´ –°–∫–∏–¥–∫–∞: {event['discount']}% –Ω–∞ –∫—Ä—É—Ç–∫–∏\n"
    
    text += f"\nüë§ –°–æ–∑–¥–∞–ª: {get_admin_name(event['created_by'])}"
    
    keyboard = [
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_delete_{event_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_view_events')]
    ]
    
    await send_or_edit(update, text, keyboard)

async def admin_confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    event_id = int(update.callback_query.data.split('_')[-1])
    event = get_event_by_id(event_id)
    
    if not event:
        await update.callback_query.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_confirm_{event_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"admin_event_info_{event_id}")]
    ]
    
    await send_or_edit(update, 
                      f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ \"{event['name']}\"?",
                      keyboard)
    
async def admin_delete_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    event_id = int(update.callback_query.data.split('_')[-1])
    
    if delete_event(event_id):
        await send_or_edit(update, 
                          "‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
                          [[InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π", callback_data='admin_view_events')]])
    else:
        await send_or_edit(update, 
                          "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è",
                          [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_view_events')]])



# promocodes.py
def add_promocode(code: str, amount: int, days: int, admin_id: int) -> bool:
    expires_at = (datetime.now() + timedelta(days=days)).isoformat()
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT INTO promocodes (code, bonus_amount, expires_at, created_by)
            VALUES (?, ?, ?, ?)
        ''', (code.upper(), amount, expires_at, admin_id))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

async def use_promocode(user_id: int, code: str) -> tuple:
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥
        cursor.execute('''
            SELECT bonus_amount FROM promocodes 
            WHERE code = ? AND expires_at > datetime('now')
        ''', (code.upper(),))
        promocode = cursor.fetchone()
        
        if not promocode:
            return (False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('''
            SELECT 1 FROM used_promocodes 
            WHERE user_id = ? AND code = ?
        ''', (user_id, code.upper()))
        
        if cursor.fetchone():
            return (False, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥")
        
        # –ó–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
        update_balance(user_id, promocode[0])
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        cursor.execute('''
            INSERT INTO used_promocodes (user_id, code)
            VALUES (?, ?)
        ''', (user_id, code.upper()))
        
        conn.commit()
        return (True, f"–ü–æ–ª—É—á–µ–Ω–æ {promocode[0]} –º–æ–Ω–µ—Ç!")
    finally:
        conn.close()

async def admin_events_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data='admin_add_event')], 
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data='admin_delete_event')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]
    ]
    await update.callback_query.edit_message_text(
        "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_edit_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    events = get_all_events()  # –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
    if not events:
        await update.callback_query.edit_message_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_events')]
            ])
        )
        return
    
    keyboard = []
    for event in events:
        keyboard.append([InlineKeyboardButton(
            f"{event['name']} (ID: {event['id']})", 
            callback_data=f"edit_event_{event['id']}"
        )])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_events')])
    
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
def get_all_events():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM events')
    events = []
    for row in cursor.fetchall():
        events.append({
            'id': row[0],
            'name': row[1],
            'description': row[2],
            'multiplier': row[3],
            'fixed_win': row[4],
            'discount': row[5],
            'attempts': row[6],
            'expires_at': row[7],
            'created_by': row[8]
        })
    conn.close()
    return events


def decrease_event_attempts(event_id: int):
    """–£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE events 
        SET attempts = attempts - 1 
        WHERE event_id = ? AND attempts > 0
    ''', (event_id,))
    conn.commit()
    conn.close()


async def rating_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üèÜ –¢–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É", callback_data='rating_balance')],
        [InlineKeyboardButton("üíé –¢–æ–ø –ø–æ –≤—ã–∏–≥—Ä—ã—à–∞–º", callback_data='rating_profit')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='users_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üìä –†–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üìä –†–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤:",
            reply_markup=reply_markup
        )

async def show_rating(update: Update, context: ContextTypes.DEFAULT_TYPE, rating_type: str) -> None:
    if rating_type == 'balance':
        top_users = get_top_balance()
        title = "üèÜ –¢–æ–ø-15 –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n"
        for i, user in enumerate(top_users, 1):
            title += f"{i}. {user['first_name']} {user['last_name'] or ''} (@{user['username'] or '–Ω–µ—Ç'}) - {user['balance']} –º–æ–Ω–µ—Ç\n"
    else:
        top_users = get_top_profit()
        title = "üíé –¢–æ–ø-15 –ø–æ —á–∏—Å—Ç–æ–º—É –≤—ã–∏–≥—Ä—ã—à—É:\n\n"
        for i, user in enumerate(top_users, 1):
            title += f"{i}. {user['first_name']} {user['last_name'] or ''} (@{user['username'] or '–Ω–µ—Ç'}) - {user['profit']} –º–æ–Ω–µ—Ç\n"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –¢–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É", callback_data='rating_balance'),
         InlineKeyboardButton("üîÑ –¢–æ–ø –ø–æ –≤—ã–∏–≥—Ä—ã—à–∞–º", callback_data='rating_profit')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='rating_menu')]
    ]
    
    await update.callback_query.edit_message_text(
        title,
        reply_markup=InlineKeyboardMarkup(keyboard))

async def show_disclaimer(update: Update, context: ContextTypes.DEFAULT_TYPE, from_handler: str = "start"):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'disclaimer_msg_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['disclaimer_msg_id']
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞: {e}")

    disclaimer_text = """
‚ö†Ô∏è <b>–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b> ‚ö†Ô∏è

–≠—Ç–æ—Ç Telegram-–±–æ—Ç <b>"Lucky Azart"</b> —è–≤–ª—è–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ <b>—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º</b> –∏ <b>–Ω–µ –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω—ã–º –∞–∑–∞—Ä—Ç–Ω—ã–º –∏–≥—Ä–∞–º</b>.

<b>‚ñ´Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è:</b>
‚Ä¢ –í—Å–µ "—Å—Ç–∞–≤–∫–∏" —Å–æ–≤–µ—Ä—à–∞—é—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
‚Ä¢ –ù–∏–∫–∞–∫–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∏ –Ω–µ –≤—ã–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è
‚Ä¢ –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∑–∞—Ä—Ç–Ω–æ–π –∏–≥—Ä–æ–π –≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º —Å–º—ã—Å–ª–µ

<b>‚ñ´Ô∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å:</b>
‚Ä¢ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–∞ –∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã
‚Ä¢ –ù–µ –ø—Ä–æ–≤–æ–¥–∏—Ç –¥–µ–Ω–µ–∂–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
‚Ä¢ –ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–µ–ø–æ–∑–∏—Ç—ã –∏ –Ω–µ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∏

<b>‚ñ´Ô∏è –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω:</b>
‚Ä¢ <b>–†–§:</b> –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –§–ó-244 "–û –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä"
‚Ä¢ <b>–ï–°:</b> –ù–µ –ø–æ–¥–ø–∞–¥–∞–µ—Ç –ø–æ–¥ –î–∏—Ä–µ–∫—Ç–∏–≤—É 2014/62/EU –æ–± –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä–∞—Ö
‚Ä¢ <b>–°–®–ê:</b> –ù–µ –Ω–∞—Ä—É—à–∞–µ—Ç UIGEA (Unlawful Internet Gambling Enforcement Act)

<b>‚ñ´Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–∞–º–∏ –º–ª–∞–¥—à–µ 18 –ª–µ—Ç
‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–æ–∑–º–æ–∂–Ω—É—é –∏–≥—Ä–æ–≤—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å

–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ:
1. –ü–æ–Ω–∏–º–∞–µ—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏—Ä–æ–¥—É "—Å—Ç–∞–≤–æ–∫"
2. –ù–µ –æ–∂–∏–¥–∞–µ—Ç–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–∂–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç
3. –û—Å–æ–∑–Ω–∞—ë—Ç–µ, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å

–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /terms
"""
    buttons = [[InlineKeyboardButton("‚úÖ –Ø –ø–æ–Ω–∏–º–∞—é", callback_data=f'disclaim_ok_{from_handler}')]]
    
    msg = await update.effective_message.reply_text(
        text=disclaimer_text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='HTML'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['disclaimer_msg_id'] = msg.message_id
    context.user_data['disclaimer_time'] = time.time()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å job_queue
    if context.job_queue:
        context.job_queue.run_once(
            callback=auto_delete_disclaimer,
            when=10,
            chat_id=update.effective_chat.id,
            name=f"disclaim_{msg.message_id}"
        )

async def auto_delete_disclaimer(context: CallbackContext):
    
    if 'disclaimer_msg_id' not in context.user_data:
        return
        
    try:
        await context.bot.delete_message(...)
    except Exception:
        pass
        
    # –í–∞–∂–Ω–æ: –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    context.user_data.pop('disclaimer_msg_id', None)
    context.user_data.pop('disclaimer_time', None)

# async def delete_disclaimer_callback(context: CallbackContext):
#     job = context.job
#     chat_id = job.chat_id
#     try:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
#         if 'disclaimer_message_id' in context.user_data:
#             message_id = context.user_data['disclaimer_message_id']
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ –ø–æ –∫–Ω–æ–ø–∫–µ
#             if time.time() - context.user_data.get('disclaimer_time', 0) >= 9.5:  # 0.5 —Å–µ–∫ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
#                 await context.bot.delete_message(
#                     chat_id=chat_id,
#                     message_id=message_id
#                 )
#                 # –ß–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ
#                 context.user_data.pop('disclaimer_message_id', None)
#                 context.user_data.pop('disclaimer_time', None)
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞: {e}")
        
async def games_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    events_count = get_active_events_count()
    events_info = f"\n\nüéÅ –î–æ—Å—Ç—É–ø–Ω–æ {events_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤!" if events_count > 0 else ""
    
    keyboard = [
        [InlineKeyboardButton("üé≤ –ö–æ—Å—Ç–∏", callback_data='game_dice'),
         InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã", callback_data='game_slots'),
         InlineKeyboardButton("üé° –†—É–ª–µ—Ç–∫–∞", callback_data='game_roulette')],
        [InlineKeyboardButton("üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä", callback_data='game_rules')],
        [InlineKeyboardButton("üéâ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è", callback_data='events_menu')],  # –î–û–ë–ê–í–õ–ï–ù–û
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f'üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É</b>{events_info}'
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

async def game_roulette_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    keyboard = [
        [InlineKeyboardButton("üî¥ –ö—Ä–∞—Å–Ω–æ–µ", callback_data='roulette_red'),
         InlineKeyboardButton("‚ö´ –ß–µ—Ä–Ω–æ–µ", callback_data='roulette_black')],
        [InlineKeyboardButton("üî¢ –ß–µ—Ç–Ω–æ–µ", callback_data='roulette_even'),
         InlineKeyboardButton("üî£ –ù–µ—á–µ—Ç–Ω–æ–µ", callback_data='roulette_odd')],
        [InlineKeyboardButton("1-18", callback_data='roulette_1to18'),
         InlineKeyboardButton("19-36", callback_data='roulette_19to36')],
        [InlineKeyboardButton("üî¢ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —á–∏—Å–ª–æ", callback_data='roulette_number')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='games_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üé° –†—É–ª–µ—Ç–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üé° –†—É–ª–µ—Ç–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
            reply_markup=reply_markup
        )

async def handle_roulette_bet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    
    if not user_data:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    text = update.message.text.strip()
    
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä —á–∏—Å–ª–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏
        if context.user_data.get('roulette_bet_type') == 'number' and 'roulette_number' not in context.user_data:
            number = int(text)
            if number < 0 or number > 36:
                await update.message.reply_text("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 36!")
                return
                
            context.user_data['roulette_number'] = number
            await update.message.reply_text(
                f"üé° –í—ã–±—Ä–∞–Ω–æ —á–∏—Å–ª–æ: {number}\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:"
            )
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
        bet_amount = int(text)
        if bet_amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
            
        if user_data['balance'] < bet_amount:
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']}")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å—Ç–∞–≤–∫–∏
        bet_type = context.user_data['roulette_bet_type']
        
        # –î–ª—è —Å—Ç–∞–≤–∫–∏ –Ω–∞ —á–∏—Å–ª–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        if bet_type == 'number':
            if 'roulette_number' not in context.user_data:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ!")
                return
            bet_type = str(context.user_data['roulette_number'])
        
        # –ò–≥—Ä–∞–µ–º —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ —Å–æ–±—ã—Ç–∏–π
        win, payout, result, applied_events, final_bet = await play_roulette(user_id, bet_type, bet_amount)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if win:
            response = f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {payout} –º–æ–Ω–µ—Ç!\n"
        else:
            response = f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {final_bet} –º–æ–Ω–µ—Ç.\n"
            
        response += f"üé° {result}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö
        if applied_events:
            response += f"üéÅ –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã: {', '.join(applied_events)}\n"
            
        response += f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {get_user(user_id)['balance']}"

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–≥—Ä—ã
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üé° –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='game_roulette')]])
        await update.message.reply_text(response, reply_markup=keyboard)
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('roulette_bet_type', None)
        context.user_data.pop('roulette_number', None)
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

async def users_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏", callback_data='transfer_money')],
        [InlineKeyboardButton("üìä –†–µ–π—Ç–∏–Ω–≥–∏", callback_data='rating_menu')],  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    ]
    
    if get_user(update.effective_user.id)['is_admin']:
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω–∫–∞", callback_data='admin_panel')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            'üë§ –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:',
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            'üë§ –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:',
            reply_markup=reply_markup
        )

async def admin_delete_event_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    events = get_all_events()
    
    if not events:
        await send_or_edit(update, 
                         "üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                         [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_events')]])
        return
    
    keyboard = []
    for event in events:
        event_info = f"{event['name']} (ID: {event['id']})"
        keyboard.append([InlineKeyboardButton(event_info, callback_data=f"admin_confirm_delete_{event['id']}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_events')])
    
    await send_or_edit(update, "üóë –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", keyboard)

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª
async def game_rules(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    rules_text = """
üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä:

üé≤ –ö–æ—Å—Ç–∏:
1. –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6
2. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É
3. –ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç –≤–∞—à–µ —á–∏—Å–ª–æ - –≤—ã–∏–≥—Ä—ã—à —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º 1:1 –¥–æ 6:1
4. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞

üé∞ –°–ª–æ—Ç—ã:
1. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É
2. –ö—Ä—É—Ç—è—Ç—Å—è 3 –±–∞—Ä–∞–±–∞–Ω–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
3. –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ - –≤—ã–∏–≥—Ä—ã—à 0.5x —Å—Ç–∞–≤–∫–∏
4. –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ - –≤—ã–∏–≥—Ä—ã—à 3x —Å—Ç–∞–≤–∫–∏
5. –¢—Ä–∏ —Å–∏–º–≤–æ–ª–∞ '7' - –¥–∂–µ–∫–ø–æ—Ç 10x —Å—Ç–∞–≤–∫–∏

üé° –†—É–ª–µ—Ç–∫–∞:
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:
   - üî¥ –ö—Ä–∞—Å–Ω–æ–µ (1:1)
   - ‚ö´ –ß–µ—Ä–Ω–æ–µ (1:1)
   - üî¢ –ß–µ—Ç–Ω–æ–µ (1:1)
   - üî£ –ù–µ—á–µ—Ç–Ω–æ–µ (1:1)
   - 1-18 (1:1)
   - 19-36 (1:1)
   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ (1-36, 35:1)
2. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É
3. –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª–∏ - –ø–æ–ª—É—á–∏—Ç–µ –≤—ã–ø–ª–∞—Ç—É –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É
4. 0 (–∑–µ—Ä–æ) - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à (–∫—Ä–æ–º–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ 0)
"""
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='games_menu')]]
    await update.callback_query.edit_message_text(
        rules_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def play_roulette(user_id: int, bet_type: str, bet_amount: int) -> Tuple[bool, int, str, list, int]:
    user = get_user(user_id)
    if not user or user['balance'] < bet_amount:
        return False, 0, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", [], 0
    
    # –ü–†–ò–ú–ï–ù–Ø–ï–ú –ë–û–ù–£–°–´ –°–û–ë–´–¢–ò–ô
    final_bet, bonuses, applied_events = apply_event_bonuses(user_id, "roulette", bet_amount)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫
    if user['balance'] < final_bet:
        return False, 0, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫", [], 0

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ (0-36)
    winning_number = random.randint(0, 36)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —á–∏—Å–ª–∞ (0 - –∑–µ–ª—ë–Ω—ã–π)
    if winning_number == 0:
        color = "green"
    elif winning_number % 2 == 1:
        color = "red"  # –ù–µ—á–µ—Ç–Ω—ã–µ = –∫—Ä–∞—Å–Ω—ã–µ (–≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–µ)
    else:
        color = "black"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    win = False
    base_payout = 0
    payout_multiplier = 1
    
    if bet_type.isdigit():  # –°—Ç–∞–≤–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ (1-36)
        if int(bet_type) == winning_number:
            win = True
            base_payout = final_bet * 35
            payout_multiplier = 35
    else:
        bet_type = bet_type.lower()
        if bet_type == "red" and color == "red":
            win = True
            base_payout = final_bet * 1
            payout_multiplier = 1
        elif bet_type == "black" and color == "black":
            win = True
            base_payout = final_bet * 1
            payout_multiplier = 1
        elif bet_type == "even" and winning_number % 2 == 0 and winning_number != 0:
            win = True
            base_payout = final_bet * 1
            payout_multiplier = 1
        elif bet_type == "odd" and winning_number % 2 == 1:
            win = True
            base_payout = final_bet * 1
            payout_multiplier = 1
        elif bet_type == "1to18" and 1 <= winning_number <= 18:
            win = True
            base_payout = final_bet * 1
            payout_multiplier = 1
        elif bet_type == "19to36" and 19 <= winning_number <= 36:
            win = True
            base_payout = final_bet * 1
            payout_multiplier = 1

    total_win_amount = 0
    
    if win:
        # ‚úÖ –ü–†–ò–ú–ï–ù–Ø–ï–ú –ë–û–ù–£–°–´ –ü–†–ê–í–ò–õ–¨–ù–û
        total_win = base_payout + bonuses['fixed_bonus']     # + —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å
        total_win_amount = int(total_win * bonuses['multiplier'])  # √ó –º–Ω–æ–∂–∏—Ç–µ–ª—å
        
        update_balance(user_id, total_win_amount)
        add_transaction(user_id, total_win_amount, "win", "roulette", 
                       f"bet:{bet_type},win:{winning_number},payout_x:{payout_multiplier},events:{applied_events},final_bet:{final_bet}")
    else:
        # ‚úÖ –ü–†–ò –ü–†–û–ò–ì–†–´–®–ï: —Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ final_bet
        update_balance(user_id, -final_bet)
        add_transaction(user_id, -final_bet, "loss", "roulette", 
                       f"bet:{bet_type},win:{winning_number},events:{applied_events},final_bet:{final_bet}")

    return win, total_win_amount, f"–í—ã–ø–∞–ª–æ: {winning_number} ({color})", applied_events, final_bet

async def transfer_money_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.edit_message_text(
        "üí∏ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID/username –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "123456 100\n"
        "–∏–ª–∏\n"
        "@username 200",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='users_menu')]])
    )
    context.user_data['transfer_step'] = 'wait_input'
async def handle_transfer_recipient(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        recipient_input = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–ª–∏ –ª–∏ ID (—á–∏—Å–ª–æ) –∏–ª–∏ username (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)
        if recipient_input.startswith('@'):
            # –ü–æ–∏—Å–∫ –ø–æ username
            username = recipient_input[1:]
            conn = sqlite3.connect(DATABASE_NAME)
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM users WHERE username = ?', (username,))
            result = cursor.fetchone()
            conn.close()
            
            if not result:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='users_menu')]])
                )
                return
                
            recipient_id = result[0]
        else:
            # –ü–æ–∏—Å–∫ –ø–æ ID
            try:
                recipient_id = int(recipient_input)
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID (—á–∏—Å–ª–æ) –∏–ª–∏ @username",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='users_menu')]])
                )
                return
                
            if not get_user(recipient_id):
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {recipient_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='users_menu')]])
                )
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã
        context.user_data['transfer_recipient_id'] = recipient_id
        context.user_data['transfer_step'] = 'wait_amount'
        
        recipient = get_user(recipient_id)
        recipient_name = f"{recipient['first_name']} {recipient['last_name'] or ''}"
        
        await update.message.reply_text(
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_name}\n"
            f"üÜî ID: {recipient_id}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='users_menu')]])
        )
        
    except Exception as e:
        logger.error(f"Transfer recipient error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='users_menu')]])
        )
async def handle_transfer_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user_id = update.effective_user.id
        sender_data = get_user(user_id)
        amount = int(update.message.text)
        
        if amount <= 0:
            await update.message.reply_text(
                "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='users_menu')]])
            )
            return
            
        if sender_data['balance'] < amount:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {sender_data['balance']}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='users_menu')]])
            )
            return
            
        recipient_id = context.user_data['transfer_recipient_id']
        recipient_data = get_user(recipient_id)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        update_balance(user_id, -amount)
        update_balance(recipient_id, amount)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        add_transaction(user_id, -amount, "transfer_out", None, f"to:{recipient_id}")
        add_transaction(recipient_id, amount, "transfer_in", None, f"from:{user_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        sender_name = f"{sender_data['first_name']} {sender_data['last_name'] or ''}"
        recipient_name = f"{recipient_data['first_name']} {recipient_data['last_name'] or ''}"
        
        await update.message.reply_text(
            f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
            f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name}\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_name}\n"
            f"üíµ –°—É–º–º–∞: {amount} –º–æ–Ω–µ—Ç\n\n"
            f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {sender_data['balance'] - amount}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_menu')]])
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        context.user_data.pop('transfer_step', None)
        context.user_data.pop('transfer_recipient_id', None)
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='users_menu')]])
        )

async def handle_transfer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if 'transfer_step' not in context.user_data:
        return
    
    try:
        text = update.message.text.strip().split()
        if len(text) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - ID –∏–ª–∏ username)
        recipient_input = text[0]
        amount = int(text[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
            
        # –ò—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        if recipient_input.startswith('@'):
            # –ü–æ–∏—Å–∫ –ø–æ username
            username = recipient_input[1:]
            conn = sqlite3.connect(DATABASE_NAME)
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM users WHERE username = ?', (username,))
            result = cursor.fetchone()
            conn.close()
            
            if not result:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            recipient_id = result[0]
        else:
            # –ü–æ–∏—Å–∫ –ø–æ ID
            try:
                recipient_id = int(recipient_input)
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ @username")
                return
                
            if not get_user(recipient_id):
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {recipient_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_id = update.effective_user.id
        sender_data = get_user(sender_id)
        
        if not sender_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if sender_data['balance'] < amount:
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {sender_data['balance']}")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        recipient_data = get_user(recipient_id)
        if not recipient_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        update_balance(sender_id, -amount)
        update_balance(recipient_id, amount)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        add_transaction(sender_id, -amount, "transfer_out", None, f"to:{recipient_id}")
        add_transaction(recipient_id, amount, "transfer_in", None, f"from:{sender_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        sender_name = f"{sender_data['first_name']} {sender_data['last_name'] or ''}"
        recipient_name = f"{recipient_data['first_name']} {recipient_data['last_name'] or ''}"
        
        await update.message.reply_text(
            f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
            f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name}\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_name}\n"
            f"üíµ –°—É–º–º–∞: {amount} –º–æ–Ω–µ—Ç\n\n"
            f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {sender_data['balance'] - amount}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_menu')]])
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        context.user_data.pop('transfer_step', None)
        
    except ValueError as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {str(e)}\n"
            "–§–æ—Ä–º–∞—Ç: ID/username —Å—É–º–º–∞\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n123456 100\n@username 200",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='users_menu')]])
        )
    except Exception as e:
        logger.error(f"Transfer error: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='users_menu')]])
        )

async def timeout_callback(context: CallbackContext):
    job = context.job
    await context.bot.send_message(
        job.chat_id,
        "‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
    )

def set_timeout(context: CallbackContext):
    if 'job' in context.user_data:
        context.user_data['job'].schedule_removal()
    
    job = context.job_queue.run_once(
        timeout_callback, 
        60, 
        chat_id=context.user_data.get('chat_id'),
        name=str(context.user_data.get('user_id'))
    )
    context.user_data['job'] = job


async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_data = get_user(update.effective_user.id)
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç",
            reply_markup=reply_markup
        )

    if context.args:
        await check_balance(update, context, context.args[0])
    else:
        await check_balance(update, context)
    

async def game_dice_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    keyboard = [
        [InlineKeyboardButton("1", callback_data='dice_1'),
         InlineKeyboardButton("2", callback_data='dice_2'),
         InlineKeyboardButton("3", callback_data='dice_3')],
        [InlineKeyboardButton("4", callback_data='dice_4'),
         InlineKeyboardButton("5", callback_data='dice_5'),
         InlineKeyboardButton("6", callback_data='dice_6')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üé≤ –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ (1-6):\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ —á–∞—Ç.",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üé≤ –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ (1-6):\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ —á–∞—Ç.",
            reply_markup=reply_markup
        )

async def game_slots_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üé∞ –ò–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã:\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ —á–∞—Ç.",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üé∞ –ò–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã:\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ —á–∞—Ç.",
            reply_markup=reply_markup
        )

async def handle_bet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    if not context.user_data.get('disclaimer_shown', False):
        await show_disclaimer(update, context, "game")
        return
    try:
        bet_amount = int(update.message.text)
        if bet_amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
            
        if user_data['balance'] < bet_amount:
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ë–∞–ª–∞–Ω—Å: {user_data['balance']}")
            return
            
        game_type = context.user_data['current_game']
        
        if game_type == 'dice':
            if 'dice_guess' not in context.user_data:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ!")
                return
                
            guess = context.user_data['dice_guess']
            won, coefficient, roll, applied_events, win_amount = await play_dice(user_id, bet_amount, guess)
            
            response = (
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç!\n"
                f"üé≤ –í—ã–ø–∞–ª–æ: {roll} (—Å—Ç–∞–≤–∫–∞: {guess})\n"
                f"üìà –ö–æ—ç—Ñ: {coefficient:.2f}x\n"
                if won else
                f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç\n"
                f"üé≤ –í—ã–ø–∞–ª–æ: {roll} (—Å—Ç–∞–≤–∫–∞: {guess})\n"
                f"üìà –ö–æ—ç—Ñ –±—ã–ª: {coefficient:.2f}x\n"
            )
            
        elif game_type == 'slots':
            won, coefficient, reels, applied_events, win_amount = await play_slots(user_id, bet_amount)
            
            if won:
                if reels[0] == reels[1] == reels[2]:
                    win_text = "üéâ –î–ñ–ï–ö–ü–û–¢! –¢—Ä–∏ 7!" if reels[0] == '7' else "üéâ –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö!"
                else:
                    win_text = "üéâ –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö!"
                
                response = (
                    f"{win_text}\nüé∞ {' '.join(reels)}\n"
                    f"üí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç!\n"
                    f"üìà –ö–æ—ç—Ñ: {coefficient:.2f}x\n"
                )
            else:
                response = (
                    f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç\n"
                    f"üé∞ {' '.join(reels)}\n"
                    f"üìà –ö–æ—ç—Ñ –±—ã–ª: {coefficient:.2f}x\n"
                )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö
        if applied_events:
            response += f"üéÅ –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã: {', '.join(applied_events)}\n"
        if applied_events:
            bonus_text = "üéÅ –ê–ö–¢–ò–í–ù–´–ï –ë–û–ù–£–°–´:\n"
            for bonus in applied_events:
                bonus_text += f"   ‚Ä¢ {bonus}\n"
            response = bonus_text + response
        # –û–±—â–∏–π –≤—ã–≤–æ–¥ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä
        response += f"üí∞ –ë–∞–ª–∞–Ω—Å: {get_user(user_id)['balance']}"
        keyboard = [
            [InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f'game_{game_type}')],
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        await update.message.reply_text(response, reply_markup=InlineKeyboardMarkup(keyboard))
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('current_game', None)
        context.user_data.pop('dice_guess', None)
        
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    user = get_user(update.effective_user.id)
    if not user or user['is_admin'] != 1:  
        await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    if context.job_queue:
        context.job_queue.run_once(
            timeout_callback, 
            300,
            chat_id=update.effective_chat.id,
            name=str(update.effective_user.id))
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_full_stats'),
         InlineKeyboardButton("üõ† –°–æ–±—ã—Ç–∏—è", callback_data='admin_events')],
        [InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data='admin_users'),
         InlineKeyboardButton("üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data='admin_promocodes')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_menu')]
    ]
    await send_or_edit(update, "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", keyboard)

async def admin_add_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞", callback_data='admin_add_event_multiplier')],
        [InlineKeyboardButton("üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å", callback_data='admin_add_event_fixed')],
        [InlineKeyboardButton("üé´ –°–∫–∏–¥–∫–∞ –Ω–∞ —Å—Ç–∞–≤–∫–∏", callback_data='admin_add_event_discount')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_events')]
    ]
    
    text = (
        "üéÅ –í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –°–û–ë–´–¢–ò–Ø\n\n"
        "üìà <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞</b> - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à –≤ X —Ä–∞–∑\n"
        "üí∞ <b>–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å</b> - –¥–æ–±–∞–≤–ª—è–µ—Ç N –º–æ–Ω–µ—Ç –∫ –≤—ã–∏–≥—Ä—ã—à—É\n"  
        "üé´ <b>–°–∫–∏–¥–∫–∞ –Ω–∞ —Å—Ç–∞–≤–∫–∏</b> - —É–º–µ–Ω—å—à–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∞–≤–æ–∫ –Ω–∞ N%\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:"
    )
    
    await send_or_edit(update, text, keyboard)

async def add_event_multiplier_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['event_type'] = 'multiplier'
    await send_or_edit(update, 
                      "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                      "–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–ú–Ω–æ–∂–∏—Ç–µ–ª—å|–ü–æ–ø—ã—Ç–∫–∏ (-1 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö)|–î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                      [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_add_event')]])

async def process_event_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'event_type' not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é")
        return

    try:
        data = update.message.text.split('|')
        if len(data) != 5:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

        name = data[0].strip()
        description = data[1].strip()
        value = float(data[2].strip())
        attempts = int(data[3].strip())
        days_active = int(data[4].strip())

        event_type = context.user_data['event_type']
        admin_id = update.effective_user.id

        if event_type == 'multiplier':
            success = add_event(
                name=name,
                description=description,
                event_type="multiplier",
                value=value,
                attempts=attempts,
                days_active=days_active,
                admin_id=admin_id
            )
        elif event_type == 'fixed':
            success = add_event(
                name=name,
                description=description,
                event_type="fixed_win",
                value=value,
                attempts=attempts,
                days_active=days_active,
                admin_id=admin_id
            )
        elif event_type == 'discount':
            success = add_event(
                name=name,
                description=description,
                event_type="discount",
                value=value,
                attempts=attempts,
                days_active=days_active,
                admin_id=admin_id
            )

        if success:
            await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")

    except ValueError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n"
                                      "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–ó–Ω–∞—á–µ–Ω–∏–µ|–ü–æ–ø—ã—Ç–∫–∏|–î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    finally:
        context.user_data.pop('event_type', None)

def get_all_promocodes():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT code, bonus_amount, expires_at, created_by 
        FROM promocodes 
        WHERE expires_at > datetime('now')
        ORDER BY expires_at ASC
    ''')
    
    promocodes = []
    for row in cursor.fetchall():
        promocodes.append({
            'code': row[0],
            'amount': row[1],
            'expires_at': row[2],
            'created_by': row[3]
        })
    conn.close()
    return promocodes

async def admin_full_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.job_queue:
        context.job_queue.run_once(
            timeout_callback, 
            300,  # 5 –º–∏–Ω—É—Ç –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            chat_id=update.effective_chat.id,
            name=str(update.effective_user.id))
    query = update.callback_query
    await query.answer()
    
    user = get_user(update.effective_user.id)
    if not user or not user['is_admin']:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    try:
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        
        cursor.execute('SELECT SUM(balance) FROM users')
        total_balance = cursor.fetchone()[0] or 0
        
        cursor.execute('SELECT SUM(amount) FROM transactions WHERE transaction_type = "win"')
        total_wins = cursor.fetchone()[0] or 0
        
        cursor.execute('SELECT SUM(amount) FROM transactions WHERE transaction_type = "loss"')
        total_losses = cursor.fetchone()[0] or 0
        
        cursor.execute('SELECT SUM(amount) FROM transactions WHERE transaction_type = "admin_add"')
        total_added = cursor.fetchone()[0] or 0
        
        cursor.execute('SELECT SUM(amount) FROM transactions WHERE transaction_type = "admin_remove"')
        total_removed = cursor.fetchone()[0] or 0
        
        profit = total_losses - total_wins + total_removed - total_added
        
        stats_text = (
            "üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∑–∏–Ω–æ:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_balance} –º–æ–Ω–µ—Ç\n\n"
            f"üéâ –í—ã–∏–≥—Ä–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {total_wins} –º–æ–Ω–µ—Ç\n"
            f"üí∏ –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {total_losses} –º–æ–Ω–µ—Ç\n\n"
            f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏: {total_added} –º–æ–Ω–µ—Ç\n"
            f"‚ûñ –°–Ω—è—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏: {total_removed} –º–æ–Ω–µ—Ç\n\n"
            f"üè¶ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –∫–∞–∑–∏–Ω–æ: {profit} –º–æ–Ω–µ—Ç"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='admin_reset_stats')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')],
        ]
        
        await query.edit_message_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]])
        )
    finally:
        conn.close()

async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    user = get_user(update.effective_user.id)
    if not user or not user['is_admin']:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='admin_users_list')],
        [InlineKeyboardButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='admin_add_money')],
        [InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data='admin_remove_money')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')],
    ]
    
    await query.edit_message_text(
        'üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_add_money_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    context.user_data['admin_action'] = 'add'
    context.user_data['admin_step'] = 'wait_user_id'
    
    await query.edit_message_text(
        "üíµ –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_users')]])
    )

async def admin_remove_money_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    context.user_data['admin_action'] = 'remove'
    context.user_data['admin_step'] = 'wait_user_id'
    
    await query.edit_message_text(
        "üí∏ –°–ù–Ø–¢–ò–ï –°–†–ï–î–°–¢–í\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_users')]])
    )

async def admin_process_user_id(update: Update, context: CallbackContext):
    try:
        user_input = update.message.text.strip()
        
        # –ü–æ–∏—Å–∫ –ø–æ username
        if user_input.startswith('@'):
            username = user_input[1:]
            conn = sqlite3.connect(DATABASE_NAME)
            cursor = conn.cursor()
            cursor.execute('SELECT user_id, first_name, last_name, balance FROM users WHERE username = ?', (username,))
            result = cursor.fetchone()
            conn.close()
            
            if not result:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_users')]])
                )
                return
                
            user_id, first_name, last_name, balance = result
            user_data = {
                'user_id': user_id,
                'first_name': first_name,
                'last_name': last_name,
                'balance': balance
            }
        else:
            # –ü–æ–∏—Å–∫ –ø–æ ID
            try:
                user_id = int(user_input)
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID (—á–∏—Å–ª–æ) –∏–ª–∏ @username",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_users')]])
                )
                return
                
            user_data = get_user(user_id)
            if not user_data:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_users')]])
                )
                return
        
        context.user_data['admin_user_id'] = user_id
        context.user_data['admin_step'] = 'wait_amount'
        
        action = context.user_data['admin_action']
        
        await update.message.reply_text(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['first_name']} {user_data['last_name'] or ''}\n"
            f"üÜî ID: {user_id}\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è {'–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è' if action == 'add' else '—Å–Ω—è—Ç–∏—è'}:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_users')]])
        )
        
    except Exception as e:
        logger.error(f"Admin user search error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_users')]])
        )

async def admin_process_amount(update: Update, context: CallbackContext):
    try:
        amount = int(update.message.text)
        if amount <= 0:
            await update.message.reply_text(
                "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_users')]])
            )
            return
        
        user_id = context.user_data['admin_user_id']
        action = context.user_data['admin_action']
        user_data = get_user(user_id)
        
        # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏
        new_balance = user_data['balance'] + (amount if action == 'add' else -amount)
        
        # –ó–∞–ø—Ä–µ—â–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if new_balance < 0:
            await update.message.reply_text(
                "‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_users')]])
            )
            return
        
        update_balance(user_id, amount if action == 'add' else -amount)
        
        transaction_type = "admin_add" if action == 'add' else "admin_remove"
        add_transaction(user_id, amount, transaction_type)
        
        await update.message.reply_text(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ {'–ø–æ–ø–æ–ª–Ω–µ–Ω' if action == 'add' else '—É–º–µ–Ω—å—à–µ–Ω'}!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['first_name']} {user_data['last_name'] or ''}\n"
            f"üÜî ID: {user_id}\n"
            f"üí∞ –ë—ã–ª–æ: {user_data['balance']} –º–æ–Ω–µ—Ç\n"
            f"üíµ –°—É–º–º–∞: {amount} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –°—Ç–∞–ª–æ: {new_balance} –º–æ–Ω–µ—Ç",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data='admin_panel')]])
        )
        
        context.user_data.pop('admin_action', None)
        context.user_data.pop('admin_step', None)
        context.user_data.pop('admin_user_id', None)
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_users')]])
        )

async def admin_wait_for_user_id(update: Update, context: CallbackContext) -> None:
    query = update.callback_query   
    await query.answer()
    
    user = get_user(update.effective_user.id)
    if not user or not user['is_admin']:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ callback_data
    if query.data == 'admin_add_money':
        context.user_data['admin_action'] = 'add'
    elif query.data == 'admin_remove_money':
        context.user_data['admin_action'] = 'remove'
    
    context.user_data['admin_step'] = 'wait_user_id'
    
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_users')]])
    )

async def admin_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    user = get_user(update.effective_user.id)
    if not user or not user['is_admin']:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    users = get_all_users()
    users_text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    
    for user in users:
        username = user['username'] or "–ù–µ—Ç username"
        users_text += (
            f"üë§ {user['first_name']} {user['last_name'] or ''} (@{username})\n"
            f"üÜî ID: {user['user_id']}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç\n\n"
        )
    
    if len(users_text) > 4000:
        users_text = users_text[:4000] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è)"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_users')]]
    
    await query.edit_message_text(
        users_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_reset_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    user = get_user(update.effective_user.id)
    if not user or not user['is_admin']:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    reset_statistics()
    
    await query.edit_message_text(
        "‚úÖ –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_full_stats')]])
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if not get_user(user_id):
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–ü–ï–†–í–´–ú, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    if 'event_creation' in context.user_data:
        await handle_event_creation(update, context)
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É–ª–µ—Ç–∫—É
    if 'roulette_bet_type' in context.user_data:
        await handle_roulette_bet(update, context)
        return
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∏–≥—Ä—ã
    if 'current_game' in context.user_data:
        await handle_bet(update, context)
        return
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥
    if 'transfer_step' in context.user_data:
        await handle_transfer(update, context)
        return
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏—è
    if 'admin_step' in context.user_data:
        step = context.user_data['admin_step']
        if step == 'wait_user_id':
            await admin_process_user_id(update, context)
        elif step == 'wait_amount':
            await admin_process_amount(update, context)
        return
    
    if update.message.text.startswith('/balance'):
        parts = update.message.text.split()
        if len(parts) > 1:
            await check_balance(update, context, parts[1])
        else:
            await check_balance(update, context)
        return

    
    # 5. –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    await menu(update, context)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"Received callback_data: {query.data}")  # –õ–æ–≥–∏—Ä—É–µ–º
    data = query.data
    
    if data.startswith('disclaim_ok_'):
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–æ–º  
            await query.message.delete()
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞
            context.user_data.pop('disclaimer_msg_id', None)
            context.user_data.pop('disclaimer_time', None)
            context.user_data['disclaimer_shown'] = True  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å
            target = data.split('_')[-1]
            
            if target == "start":
                await menu(update, context)
            elif target == "game":
                game_type = context.user_data.get('current_game')
                if game_type == 'dice':
                    await game_dice_menu(update, context)
                elif game_type == 'slots':
                    await game_slots_menu(update, context)
                elif game_type == 'roulette':
                    await game_roulette_menu(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞: {e}")
            return
    
    # 2. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif data == 'back_to_menu':
        await menu(update, context)
    
    # 3. –ú–µ–Ω—é –∏–≥—Ä
    elif data == 'games_menu':
        await games_menu(update, context)
    
    # 4. –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏
    elif data.startswith('dice_'):
        guess = int(data.split('_')[1])
        context.user_data['dice_guess'] = guess
        await query.edit_message_text(
            f"üé≤ –í—ã–±—Ä–∞–Ω–æ —á–∏—Å–ª–æ: {guess}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ —á–∞—Ç.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='game_dice')]
            ])
        )
    
    # 5. –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    elif data == 'events_menu':
        await events_menu(update, context)
    elif data.startswith('view_event_'):
        await view_event(update, context)
    elif data == 'admin_add_event':
        await admin_add_event(update, context)
    elif data == 'admin_add_event_multiplier':
        await admin_add_event_multiplier(update, context)
    elif data == 'admin_add_event_fixed':
        await admin_add_event_fixed(update, context)  
    elif data == 'admin_add_event_discount':
        await admin_add_event_discount(update, context)
    elif data == 'admin_cancel_event':  # –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –û–¢–ú–ï–ù–´
        await cancel_event_creation(update, context)
    elif data == 'admin_events':
        await admin_events_menu(update, context)
    elif data == 'admin_add_event':
        await admin_add_event(update, context)
    elif data == 'admin_view_events':
        await admin_view_events(update, context)
    elif data == 'admin_delete_event':
        await admin_delete_event_menu(update, context)
    elif data.startswith('admin_event_info_'):
        await admin_event_info(update, context)
    elif data.startswith('admin_confirm_delete_'):
        await admin_confirm_delete(update, context)
    elif data.startswith('admin_delete_confirm_'):
        await admin_delete_confirm(update, context)
    elif data == 'users_menu':
        await users_menu(update, context)
    elif data == 'game_dice':
        context.user_data['current_game'] = 'dice'
        await game_dice_menu(update, context)
    elif data == 'game_slots':
        context.user_data['current_game'] = 'slots'
        await game_slots_menu(update, context)
    elif data == 'game_roulette':
        context.user_data['current_game'] = 'roulette'
        await game_roulette_menu(update, context)
    # 6. –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    elif data == 'admin_panel':
        user = get_user(update.effective_user.id)
        if user and user['is_admin']:
            await admin_panel(update, context)
        else:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    
    elif data == 'users_menu':
        await users_menu(update, context)
    elif data == 'balance':
        await balance(update, context)
    elif data == 'admin_panel':
        await admin_panel(update, context)
    elif data == 'admin_full_stats':
        await admin_full_stats(update, context)
    elif data == 'admin_users':
        await admin_users(update, context)
    elif data == 'admin_users_list':
        await admin_users_list(update, context)
    elif data == 'admin_add_money':
        await admin_add_money_handler(update, context)
    elif data == 'admin_remove_money':
        await admin_remove_money_handler(update, context)
    elif data == 'admin_reset_stats':
        await admin_reset_stats(update, context)
    elif data == 'game_rules':
        await game_rules(update, context)
    elif data == 'transfer_money':
        await transfer_money_menu(update, context)
    elif data == 'rating_menu':
        await rating_menu(update, context)
    elif data == 'rating_balance':
        await show_rating(update, context, 'balance')
    elif data == 'rating_profit':
        await show_rating(update, context, 'profit')
    elif data.startswith('dice_'):
        guess = int(data.split('_')[1])
        context.user_data['dice_guess'] = guess
        await query.edit_message_text(
            f"üé≤ –í—ã–±—Ä–∞–Ω–æ —á–∏—Å–ª–æ: {guess}\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ —á–∞—Ç."
        )
        if context.job_queue:
            job = context.job_queue.run_once(
                timeout_callback, 
                60, 
                chat_id=update.effective_chat.id,
                name=str(update.effective_user.id)
            )
            context.user_data['job'] = job
    elif data.startswith('roulette_'):
        bet_type = data.split('_')[1]
        context.user_data['roulette_bet_type'] = bet_type
        
        if bet_type == 'number':
            await query.edit_message_text(
                "üé° –°—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–æ\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='game_roulette')]])
            )
        else:
            await query.edit_message_text(
                f"üé° –í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞: {get_bet_type_name(bet_type)}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='game_roulette')]])
            )

def get_top_balance(limit=15) -> List[Dict]:
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT user_id, username, first_name, last_name, balance 
        FROM users 
        ORDER BY balance DESC 
        LIMIT ?
    ''', (limit,))
    users = cursor.fetchall()
    conn.close()
    
    return [{
        'user_id': user[0],
        'username': user[1],
        'first_name': user[2],
        'last_name': user[3],
        'balance': user[4]
    } for user in users]

def get_top_profit(limit=15) -> List[Dict]:
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT u.user_id, u.username, u.first_name, u.last_name,
               COALESCE(SUM(CASE WHEN t.transaction_type = 'win' THEN t.amount ELSE 0 END), 0) -
               COALESCE(SUM(CASE WHEN t.transaction_type = 'loss' THEN t.amount ELSE 0 END), 0) as profit
        FROM users u
        LEFT JOIN transactions t ON u.user_id = t.user_id
        GROUP BY u.user_id
        ORDER BY profit DESC
        LIMIT ?
    ''', (limit,))
    users = cursor.fetchall()
    conn.close()
    
    return [{
        'user_id': user[0],
        'username': user[1],
        'first_name': user[2],
        'last_name': user[3],
        'profit': user[4]
    } for user in users]

def get_bet_type_name(bet_type: str) -> str:
    names = {
        'red': 'üî¥ –ö—Ä–∞—Å–Ω–æ–µ',
        'black': '‚ö´ –ß–µ—Ä–Ω–æ–µ',
        'even': 'üî¢ –ß–µ—Ç–Ω–æ–µ',
        'odd': 'üî£ –ù–µ—á–µ—Ç–Ω–æ–µ',
        '1to18': '1-18',
        '19to36': '19-36',
        'number': 'üî¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ'
    }
    return names.get(bet_type, bet_type)

# def save_user_data(update: Update, context: CallbackContext):
#         context.user_data['chat_id'] = update.effective_chat.id
#         context.user_data['user_id'] = update.effective_user.id
#         return True

def main() -> None:
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CallbackQueryHandler(button_handler))   
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(admin_events_menu, pattern='^admin_events$'))
    application.add_handler(CallbackQueryHandler(admin_edit_events, pattern='^admin_edit_events$'))
    application.add_handler(CallbackQueryHandler(events_menu, pattern='^events_menu$'))

    application.run_polling()

if __name__ == '__main__':
    main()